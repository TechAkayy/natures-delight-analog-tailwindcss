<script lang="ts">
import BaseIcon from '@/app/components/BaseIcon.analog' with { analog: 'imports' };

import { defu } from 'defu'
import { classNames } from '@/utils'
import { colors } from '@/utils/colors'
import appConfig from '@/app/ui'
import { input, computed } from '@angular/core';
import { NgComponentOutlet } from '@angular/common' with { analog: 'imports' };

const type = input<string>('a')
const block = input(false)
const label = input<string>('My Button')
const loading = input(false)
const disabled = input(false)
const padded = input(true)
/*
  size: {
    type: String,
    default: () => appConfig.ui.button.default.size,
    validator(value: string) {
      return Object.keys(appConfig.ui.button.size).includes(value)
    },
  },
*/
const size = input<string>(appConfig.ui.button.default.size)
/*
  color: {
    type: String,
    default: () => appConfig.ui.button.default.color,
    validator(value: string) {
      return [...colors, ...Object.keys(appConfig.ui.button.color)].includes(
        value,
      )
    },
  },
*/
const color = input<string>(appConfig.ui.button.default.color)
/*
  variant: {
    type: String,
    default: () => appConfig.ui.button.default.variant,
    validator(value: string) {
      return [
        ...Object.keys(appConfig.ui.button.variant),
        ...Object.values(appConfig.ui.button.color).flatMap((value) =>
          Object.keys(value),
        ),
      ].includes(value)
    },
  },
*/
const variant = input<string>(appConfig.ui.button.default.variant)
const icon = input<string>()
/*
  loadingIcon: {
    type: String,
    default: () => appConfig.ui.button.default.loadingIcon,
  },
*/
const loadingIcon = input<string>(appConfig.ui.button.default.loadingIcon)
const leadingIcon = input<string>()
const trailingIcon = input<string>()
const trailing = input(false)
const leading = input(false)

/*
  to: {
    type: [String, Object] as PropType<string | RouteLocationRaw>,
    default: null,
  },
*/
const to = input<string>()
const target = input<string>()
const ariaLabel = input<string>()
const square = input(false)
const truncate = input(false)
/*
  ui: {
    type: Object as PropType<Partial<typeof appConfig.ui.button>>,
    default: () => appConfig.ui.button,
  },
*/
// const ui = input(appConfig.ui.button)

// eslint-disable-next-line vue/no-dupe-keys
const ui = computed<Partial<typeof appConfig.ui.button>>(() =>
  defu({}, /*ui(),*/ appConfig.ui.button),
)

const buttonIs = computed(() => {
  if (to()) {
    return 'a'
  } else {
    return 'button'
  }
})

const buttonProps = computed(() => {
  if (to()) {
    return { href: to(), target: target() }
  } else {
    return { disabled: disabled() || loading(), type: type() }
  }
})

const isLeading = computed(() => {
  return (
    (icon() && leading()) ||
    (icon() && !trailing()) ||
    (loading() && !trailing()) ||
    leadingIcon()
  )
})

const isTrailing = computed(() => {
  return (
    (icon() && trailing()) ||
    (loading() && trailing()) ||
    trailingIcon()
  )
})

const isSquare = computed(
  () => square() || (!label()),
)

const buttonClass = computed(() => {
  const _variant =
    ui().color?.[color() as string]?.[variant() as string] ||
    ui().variant[variant()]

  return classNames(
    ui().base,
    ui().font,
    ui().rounded,
    ui().size[size()],
    ui().gap[size()],
    padded() &&
    ui()[isSquare() ? 'square' : 'padding'][size()],
    _variant?.replaceAll('{color}', color()),
    block()
      ? 'w-full flex justify-center items-center'
      : 'inline-flex items-center',
  )
})

const leadingIconName = computed(() => {
  if (loading()) {
    return loadingIcon()
  }

  return leadingIcon() || icon()
})

const trailingIconName = computed(() => {
  if (loading() && !isLeading()) {
    return loadingIcon()
  }

  return trailingIcon() || icon()
})

const leadingIconClass = computed(() => {
  return classNames(
    ui().icon.base,
    ui().icon.size[size()],
    loading() && 'animate-spin',
  )
})

const trailingIconClass = computed(() => {
  return classNames(
    ui().icon.base,
    ui().icon.size[size()],
    loading() && !isLeading() && 'animate-spin',
  )
})
</script>

<template><!-- <component :is="buttonIs" :class="buttonClass" :aria-label="ariaLabel" v-bind="buttonProps"> -->
<!-- <button [class]="buttonClass()" [aria-label]="ariaLabel" [href]="buttonProps().href" [target]="buttonProps().target"
  [disabled]="buttonProps().disabled" [type]="buttonProps().type"> -->

<span [is]="buttonIs()" [class]="buttonClass()" [aria-label]="ariaLabel" [href]="buttonProps().href"
  [target]="buttonProps().target" [disabled]="buttonProps().disabled" [type]="buttonProps().type">
  <!-- <slot name="leading"></slot> -->

  @if (isLeading() && leadingIconName()) {
  <BaseIcon [name]="leadingIconName()" [class]="leadingIconClass()" aria-hidden="true" height="24px" />
  }

  <!-- <slot> -->

  @if (label()) {
  <span [class]="[truncate ? 'text-left break-all line-clamp-1' : '']">
    {{ label() }}
  </span>
  }

  <!-- </slot> -->

  @if (isTrailing() && trailingIconName()) {
  <BaseIcon [name]="trailingIconName()" [class]="trailingIconClass()" aria-hidden="true" height="24px" />
  }

  <!-- <slot name="trailing">
    </slot> -->
  </span>
</template>

<style></style>